<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>凝萌小记</title>
    <description>作家是杂家</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 14 Jan 2020 15:17:21 +0800</pubDate>
    <lastBuildDate>Tue, 14 Jan 2020 15:17:21 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>THE KEY</title>
        <description>&lt;h2 id=&quot;缘起&quot;&gt;缘起&lt;/h2&gt;

&lt;p&gt;近来开学伊始，无事，听歌而不得，于同舍合计说要一起买个vpn，想了一想，倒不如组个云服务器自己打一个代理。&lt;/p&gt;

&lt;p&gt;毕竟买了b站大会员看不了真的很不爽欸。&lt;/p&gt;

&lt;h2 id=&quot;服务器&quot;&gt;服务器&lt;/h2&gt;

&lt;p&gt;听说阿里云主机也只要24元/月，看了一下&lt;a href=&quot;https://cn.aliyun.com/product/swas&quot;&gt;阿里云轻量应用服务器&lt;/a&gt;报价，发现24元的主机是在香港的服务器，在内地的服务器要60元。&lt;/p&gt;

&lt;p&gt;感觉好像是有点贵。&lt;/p&gt;

&lt;p&gt;然后看了一下，发现有学生优惠，&lt;a href=&quot;https://promotion.aliyun.com/ntms/act/campus2018.html?utm_content=se_1003914638&amp;amp;gclid=CjwKCAiAx_DwBRAfEiwA3vwZYiKB5A5hF97p-yrIJgcsX6I4UgI3UpY4x8MovvFhFExb4ZKWywP1bxoCZgMQAvD_BwE&quot;&gt;云翼计划&lt;/a&gt;每月只要9.5元，于是买了一个，预装Cent OS 7.6。&lt;/p&gt;

&lt;p&gt;另外腾讯云也有学生机，大概10元一个月。&lt;/p&gt;

&lt;p&gt;有趣的是这“学生”的界定是24/25岁以下都算学生。&lt;/p&gt;

&lt;h2 id=&quot;shadowsocksss服务端搭建&quot;&gt;Shadowsocks（SS）服务端搭建&lt;/h2&gt;

&lt;p&gt;然后在服务器装个SS配置以下就好了，具体参见：
&lt;a href=&quot;https://www.linuxrumen.com/fwqdj/875.html&quot;&gt;CentOS 7怎么搭建ssr(shadowsocks)&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;基本上分几步：&lt;/p&gt;

&lt;h4 id=&quot;1-安装bbr&quot;&gt;1. 安装bbr&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
rpm &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm &lt;span class=&quot;nt&quot;&gt;-Uvh&lt;/span&gt; http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
yum &lt;span class=&quot;nt&quot;&gt;--enablerepo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;elrepo-kernel install kernel-ml
awk &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$1==&quot;menuentry &quot; {print i++ &quot; : &quot; $2}'&lt;/span&gt; /etc/grub2.cfg
grub2-set-default 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后一行的0为将倒数第二行查询的到的最大版本号内核对应的序号。然后重启看看版本号是不是最大版本号，然后编辑配置文件：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uname &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
vi /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件最后添加两行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看bbr是否运行，显示tcp_bbr说明正常启动。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;bbr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-安装ss&quot;&gt;2. 安装SS&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install epel-release
yum install python-setuptools &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
easy_install pip
pip install &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip
yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git
pip install git+https://github.com/shadowsocks/shadowsocks.git@master
pip install &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; git+https://github.com/shadowsocks/shadowsocks.git@master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-配置ss&quot;&gt;3. 配置SS&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /etc/shadowsocks
vi /etc/shadowsocks/ssserver.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;server&quot;: &quot;0.0.0.0&quot;,
  &quot;local_address&quot;: &quot;127.0.0.1&quot;,
  &quot;local_port&quot;: 1080,
  &quot;fast_open&quot;: false,
  &quot;port_password&quot;:{
    &quot;9001&quot;: &quot;rimoe1&quot;,
    &quot;9002&quot;: &quot;rimoe2&quot;,
    &quot;9003&quot;: &quot;rimoe3&quot;
  },
  &quot;timeout&quot;: 300,
  &quot;method&quot;: &quot;chacha20-ietf&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;port_password就是用户端口和密码，比如3个人用就搞3个这样,其他默认就好了。&lt;/p&gt;

&lt;h4 id=&quot;4-创建ss服务&quot;&gt;4. 创建SS服务&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /usr/lib/systemd/system/shadowsocks.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Shadowsocks Server
Documentation=https://github.com/shadowsocks/shadowsocks
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks/ssserver.json --user nobody -d start
ExecReload=/bin/kill -HUP $MAINPID
ExecStop=/usr/bin/ssserver -d stop

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装依赖关系并设置开机启动：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install libsodium
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;shadowsocks
systemctl start shadowsocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5-设置防火墙&quot;&gt;5. 设置防火墙&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9001-9014/tcp
firewall-cmd &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9001-9014/tcp &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;9001至9014是Step3中的用户端口，另外注意要在阿里云控制台的“安全”-“防火墙”中添加对应端口，使用“自定义”类型和TCP协议。&lt;/p&gt;

&lt;p&gt;不过，作为一场或几场事件的见证者，我的世界观或多或少是有被改变的。&lt;/p&gt;

&lt;p&gt;即使我以为的所谓“改变”并不存在，以我为主人公的连环画里或许也能添上一些特别的故事。&lt;/p&gt;

&lt;h4 id=&quot;6-完成&quot;&gt;6. 完成&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; |grep ssserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示两个进程一个是python，另一个是ssserver，就ok。&lt;/p&gt;

&lt;h2 id=&quot;shadowsocksss客户端配置&quot;&gt;Shadowsocks（SS）客户端配置&lt;/h2&gt;
&lt;p&gt;具体就是下一个应用添加对应设置就好，具体参见&lt;a href=&quot;https://garygeng.com/others/ssr-windows/&quot;&gt;SSR Windows电脑客户端下载和使用教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;因为服务端是SS搭的，下的是SS或SSR客户端都可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shadowsocks.org/en/download/clients.html&quot;&gt;shadowsocks（SS）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocksrr&quot;&gt;shadowsocksr（SSR）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本上要设置的就几样东西，和服务端架设时的第三步对应。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;服务器ip：阿里云控制台看公网IP&lt;/p&gt;

  &lt;p&gt;端口：之前配置的用户端口&lt;/p&gt;

  &lt;p&gt;密码：对应密码&lt;/p&gt;

  &lt;p&gt;加密：chacha20-ietf（和之前配置对应就好）&lt;/p&gt;

  &lt;p&gt;用SSR客户端的话，协议混淆应该默认就好，亲测设置origin和plain没问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;理论和技术是可逆的，能进去就能出来。
但政策和法律就不一定了。&lt;/p&gt;

&lt;p&gt;2020.01.14 午后 于香港&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/01/14/post02/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/14/post02/</guid>
        
        <category>Proxy</category>
        
        <category>服务器</category>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>最后一颗糖果</title>
        <description>&lt;h2 id=&quot;好久没写东西啦&quot;&gt;好久没写东西啦&lt;/h2&gt;

&lt;p&gt;因为各种事情，一直没有更新blog，仔细一看上一篇blog已经是去年4月写的了。&lt;/p&gt;

&lt;p&gt;以下，尽是一些，在去年最后的几十分钟和今年伊始的十几分钟时，于家中的我的所想。&lt;/p&gt;

&lt;p&gt;记录于此。&lt;/p&gt;

&lt;h2 id=&quot;最后一颗糖果&quot;&gt;最后一颗糖果&lt;/h2&gt;

&lt;p&gt;若非天地无良，人又何须向善。&lt;/p&gt;

&lt;p&gt;今年的跨年平淡而无奇，我早早就洗完澡，坐在安静的房间里。&lt;/p&gt;

&lt;p&gt;世界似乎比平日还少些喧闹。&lt;/p&gt;

&lt;p&gt;眼前是一个贴着“10s”商标的罐子，我把手伸进去，发现只剩最后一颗糖果了。&lt;/p&gt;

&lt;h2 id=&quot;马克思的信众&quot;&gt;马克思的信众&lt;/h2&gt;

&lt;p&gt;现在回想起来，今年的跨年哪里是平淡，无奇的只是我本人而已&lt;/p&gt;

&lt;p&gt;过去了的魔幻的一年了，我似乎见识了浩浩荡荡的世界潮流，而我自身的学识又似乎未曾增长。&lt;/p&gt;

&lt;p&gt;不过，作为一场或几场事件的见证者，我的世界观或多或少是有被改变的。&lt;/p&gt;

&lt;p&gt;即使我以为的所谓“改变”并不存在，以我为主人公的连环画里或许也能添上一些特别的故事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/355015346/answer/895170945&quot;&gt;hk事件后，香港地区大学的文凭，是否会越来越没有含金量？招聘市场（尤其中资企业）是否会有抵制反映？ - 罗玥的回答 - 知乎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;去年12月初，去黄大仙庙吸了不少乌烟，自己花了20蚊也贡献了一些瘴气，求得一签，签序二十有四，名为“刘基归隐”，解诗曰：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;诗酒琴棋可解愁，
座中无客乐难休。
或弹或唱谁知美，
吟饮虽多亦是忧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;又花了30蚊听解，解签人说这是一枝下签，看来我的成绩不怎么样啊，又劝我多与人交，回家后烧掉签纸，化解厄运。
我笑一笑，把30块买回来的签纸揣进口袋。&lt;/p&gt;

&lt;p&gt;至今那粉色的签纸仍放在我案前，而我的成绩也似乎没有那么不堪。&lt;/p&gt;

&lt;p&gt;这不是“神秘力量”的失败，只是“神”缺席了罢了。&lt;/p&gt;

&lt;p&gt;曾经的我还会自称为主观唯心主义者，但今天看来，我是彻彻底底地成为了马克思的信众。&lt;/p&gt;

&lt;p&gt;人们之所以立起道德的标杆，不是因为举头三尺有哪位，而仅仅是因为，天地无情。&lt;/p&gt;

&lt;p&gt;2020.01.14 午后 于香港&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/01/14/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/14/post01/</guid>
        
        <category>生活</category>
        
        <category>文艺</category>
        
        
      </item>
    
      <item>
        <title>爬虫入门笔记（四）</title>
        <description>&lt;h2 id=&quot;今天天气不错&quot;&gt;今天天气不错&lt;/h2&gt;

&lt;p&gt;下了好久的雨，这两天终于是晴天了，心情不错。&lt;/p&gt;

&lt;p&gt;大四以来也没课了，上学期忙申请，颓了好久的日子。下offer后就想着做毕业论文了，但又想着先把各种积下来的麻烦事和无聊的事情做完（比如把本小站的bug修了一下之类的），拖到最近才真的开始干毕业论文。当然其中也换了下题目，反正最终就做一些和街景有关的东西就是了。&lt;/p&gt;

&lt;p&gt;本来有一些数据的，但好像不太够，于是——还是自己爬吧……&lt;/p&gt;

&lt;h2 id=&quot;place-pulse&quot;&gt;Place Pulse&lt;/h2&gt;

&lt;p&gt;当然之前搞了一个&lt;a href=&quot;https//pulse.media.mit.edu/&quot;&gt;数据集 - Place Pulse&lt;/a&gt;下来，这是mit的数据集提供一些在线问卷的数据，但图片要自己通过Google Map api下载。&lt;/p&gt;

&lt;p&gt;然后谷歌api现在还要收费了，嘛后来我在&lt;a href=&quot;https://developers.google.com/maps/documentation/streetview/intro&quot;&gt;api文档&lt;/a&gt;里发现一个示例的key，好像还能无限下载（捂脸）。&lt;/p&gt;

&lt;p&gt;用api爬数据真的挺爽的，嘛，这里有个下载Place Pulse的脚本，直接能用哦。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangleye/place_pulse_img_dowloader&quot;&gt;Place Pulse Downlaoder&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;腾讯地图&quot;&gt;腾讯地图&lt;/h2&gt;

&lt;p&gt;当然，由于研究区是国内，所以Place Pulse只能用来做training set啦。&lt;/p&gt;

&lt;p&gt;所以呢，我就打算爬一下腾讯地图的街景。&lt;/p&gt;

&lt;p&gt;申请了腾讯API，能有5个免费的key，试用量还是够的。&lt;/p&gt;

&lt;p&gt;但腾讯直截了当地说了他们家地&lt;a href=&quot;https://lbs.qq.com/panostatic_v1/index.html&quot;&gt;静态街景的API&lt;/a&gt;只对企业用户（人民币玩家）开放，于是就开始想别的办法。&lt;/p&gt;

&lt;p&gt;然后又在github上找了一个代码&lt;a href=&quot;https://github.com/neolinsu/CityWander&quot;&gt;City Wander&lt;/a&gt;，好像做得不错，但感觉有点复杂。重要的是里面的街景点是似乎预设好的，反正读代码那么累，我还是自己撸一个算了。&lt;/p&gt;

&lt;h4 id=&quot;1-抓包&quot;&gt;1. 抓包&lt;/h4&gt;

&lt;p&gt;url api不行，但发现了有js api和h5组件，于是进去看看。&lt;/p&gt;

&lt;p&gt;发现js街景竟然要flash？都什么年代了，嘛，flash好像不太好搞，没事，进示例&lt;a href=&quot;https://lbs.qq.com/javascript_v2/sample/sample-pano-face.html&quot;&gt;JS街景&lt;/a&gt;，直接Chrome F12。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2019031401/img01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这也太好搞了吧，直接发请求就可以了。&lt;/p&gt;

&lt;p&gt;https://sv6.map.qq.com/tile?&lt;strong&gt;svid&lt;/strong&gt;=10011039131104142016200&amp;amp;&lt;strong&gt;x&lt;/strong&gt;=6&amp;amp;&lt;strong&gt;y&lt;/strong&gt;=2&amp;amp;from=web&amp;amp;&lt;strong&gt;level&lt;/strong&gt;=0&amp;amp;v=2&lt;/p&gt;

&lt;p&gt;明显svid是street view index啦，x、y就是切片位置了，leval就是缩放等级了，试了一下leval=0的时候x取值是[0,7]，y取值是[0,2]。&lt;/p&gt;

&lt;p&gt;再试试&lt;a href=&quot;https://lbs.qq.com/tool/component-streetview.html&quot;&gt;h5组件&lt;/a&gt;，示例链接竟然是二维码，行吧，也合理，扫一下，搞到链接，再用chrome模拟手机打开看看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2019031401/img02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https://sv0.map.qq.com/tile?&lt;strong&gt;svid&lt;/strong&gt;=10131053140812095958800&amp;amp;&lt;strong&gt;x&lt;/strong&gt;=0&amp;amp;&lt;strong&gt;y&lt;/strong&gt;=0&amp;amp;&lt;strong&gt;level&lt;/strong&gt;=0&amp;amp;mtype=mobile-cube&amp;amp;from=web&lt;/p&gt;

&lt;p&gt;也是一个套路啊，leval=0的时候x取值是[0,10]，y取值是[0,1]。&lt;/p&gt;

&lt;p&gt;这些切片包括了一些没啥用的部分，比如头顶天空的图片和街景采集车的图片。&lt;/p&gt;

&lt;p&gt;最后我采用sv0（h5组件）的那个接口，x取[0,7]，每两张刚好是转了90度的样子，8张图拼起来大概像这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2019031401/img03.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;svid和经纬度获取&quot;&gt;svid和经纬度获取&lt;/h4&gt;

&lt;p&gt;那么问题来了svid怎么获取呢，街景对应的经纬度呢？&lt;/p&gt;

&lt;p&gt;没事，腾讯API有&lt;a href=&quot;https://lbs.qq.com/webservice_v1/guide-adsorb.html&quot;&gt;街景场景信息查询&lt;/a&gt;接口，打个grid丢进去就返回最近的街景POI啦。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用api获取街景POI&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'K24BZ-OLNRI-ODZGI-5Y7B6-xxxxx-23333'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://apis.map.qq.com/ws/streetview/v1/getpano?location'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;\
      &lt;span class=&quot;s&quot;&gt;'={},{}&amp;amp;radius=100&amp;amp;key={}'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;爬取图片&quot;&gt;爬取图片&lt;/h4&gt;

&lt;p&gt;先写一个下载图片的函数。用到了requests这个库，python3的话用urllib。request也行的。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# code for python2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://sv6.map.qq.com/tile?svid={}&amp;amp;x={}&amp;amp;y={}&amp;amp;level=0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;\
      &lt;span class=&quot;s&quot;&gt;'&amp;amp;mtype=mobile-cube&amp;amp;from=web'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{}/id{}_x{}_y{}.jpg'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但还要拼接图片，这里用opencv来做，我们要拼出4张图，先将x相同但y不同（y=1，2）的两个图拼起来。这里如果图片不存在就去下载。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s/id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s_x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s_y0.jpg'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s/id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s_x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s_y1.jpg'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 如果不存在就下载&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 迭代至下得到图片为止&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将x不同的图拼起来。这里如果图片不存在就去下载。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，调用。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'10061047150610111840800'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 4个角度&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# 合并长图&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# 显示图片&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sysu_south_gate.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# 保存图片&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;循环&quot;&gt;循环&lt;/h2&gt;

&lt;p&gt;这就是写一个for的事情了，还不会的话，就去star我的github吧，欸嘿嘿。&lt;/p&gt;

&lt;p&gt;代码已发到&lt;a href=&quot;https://github.com/codeRimoe/Spider/tree/master/demo/Level_4&quot;&gt;Github - Spider&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;2019.03.14 凌晨 于广州&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/14/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/14/post01/</guid>
        
        <category>爬虫</category>
        
        <category>技术</category>
        
        <category>Python</category>
        
        <category>数据获取</category>
        
        
      </item>
    
      <item>
        <title>我想成为你的光</title>
        <description>&lt;h2 id=&quot;0-年末了啊&quot;&gt;0. 年末了啊&lt;/h2&gt;

&lt;p&gt;圣诞了啊，年末了啊，我似乎太后知后觉了吧。&lt;/p&gt;

&lt;p&gt;若不是路过下渡路看到吹着《喀秋莎》的圣诞老人模型摆在发廊的门口，我都不知道——“啊啊，又一年了啊”。&lt;/p&gt;

&lt;p&gt;大四以来，浑浑噩噩的日子像鸦片麻痹着我，别说年末了，就连周末的来临也早已没有了感觉。&lt;/p&gt;

&lt;h2 id=&quot;1-一年的我到底干了什么&quot;&gt;1. 一年的我到底干了什么&lt;/h2&gt;

&lt;p&gt;大概没干什么吧。上半年按部就班地学习，下半年在宿舍无所事事。&lt;/p&gt;

&lt;p&gt;每天想着得不到的事情，然后稍微努力了一下。努力太累了啊，那就逃避吧，逃避到故事里头，逃避到食物里头，直到夜晚到来便去床上了。躺在床上又去想那些得不到的，睡不着啊，于是打开手机，看微博、知乎，听着歌将网易云每首歌的评论都看了一遍。累到什么都不想了，便闭上眼，祈祷明天起床醒来会是另一个世界。&lt;/p&gt;

&lt;p&gt;睁开眼后，我还是我，这个世界还是这个世界，我立志要努力去改变，去争取我想得到的东西。可是起床就已经花光了我的斗志，于是我又逃跑了。&lt;/p&gt;

&lt;p&gt;从高一起，每年的元旦前后都会写下我今年最重要的十件事，今年的我想来想去，也凑不够五件。可能这一年来，“活着”已经能算我的大事了吧。&lt;/p&gt;

&lt;h2 id=&quot;2-活着真累呀&quot;&gt;2. 活着真累呀&lt;/h2&gt;

&lt;p&gt;我的人生也就这样，哪有什么大不了的事情。对普通人来说，“活着”便已经是一件大事情了。该吃的时候吃，该快乐的时候快乐，该喜欢的时候喜欢，该工作的时候便先看看心情。&lt;/p&gt;

&lt;p&gt;有些天，每次翻开书打开电脑准备工作，我都会说一句“活着真累呀”，但我也没有多用功，只是抱怨一下，我只是不想工作罢了。&lt;/p&gt;

&lt;p&gt;看不到路的时候谁不是害怕的呢？没有灯塔没有光的时候，谁会莽莽前行？努力往前挪也好，停下来哭也罢，甚至沿着来时的路逃跑，都是差不多的。通往梦想的路会很隐蔽，不是努力就能发现的。不要害怕，你很有可能失败，甚至注定失败。但世界的残酷在于，一路以来所有人都告诉你你会找到那条路的。&lt;/p&gt;

&lt;p&gt;花了二十年仰望星空，然后用余生学着当一个平凡的人。&lt;/p&gt;

&lt;p&gt;如果还找找看那条路，便去努力一下。如果感觉太累了，那便罢了，反正大家都是如此，生而平凡。&lt;/p&gt;

&lt;p&gt;活着真累啊，我一直没想清楚为什么还要活着。&lt;/p&gt;

&lt;p&gt;当我在宿舍说出这句话的时候，他们会说，“阳台，跳下去”。&lt;/p&gt;

&lt;p&gt;“我死了，有人会伤心的。”我是这样想的。&lt;/p&gt;

&lt;p&gt;看来我活着的意义，至少是能让一些人不那么伤心。可是，我死了，谁会伤心呢？比如家人，朋友？&lt;/p&gt;

&lt;p&gt;我想总会有人爱我的。&lt;/p&gt;

&lt;h2 id=&quot;3-我的朋友很少&quot;&gt;3. 我的朋友很少&lt;/h2&gt;

&lt;p&gt;以前我说，”我的朋友很少，少到就像都市夜空的星星。”&lt;/p&gt;

&lt;p&gt;然后有个人告诉我，“但至少每一颗都那么闪耀啊“。&lt;/p&gt;

&lt;p&gt;可是现在，我似乎找不到一个随时能见的人，陪我度过一些无聊或孤独的时光，有什么想去的地方，只能自己一个人去看看。我似乎找不到一个能倾听的人，有什么想说的，快乐伤心都只能扔到朋友圈或微博里，让以后翻看旧微博旧朋友圈的我感动得流泪。&lt;/p&gt;

&lt;p&gt;我总想约一个从小学到大学都同一个学校的朋友出来。可是被拒绝了，每次回复我都是冰冷冷的几个字，说得最多的字竟是”不“。&lt;/p&gt;

&lt;p&gt;我的朋友很少，少到就像都市夜空的星星，每一颗都那么闪耀。&lt;/p&gt;

&lt;p&gt;只不离我很远，我能看到他们的光，他们听不见我的声音。&lt;/p&gt;

&lt;h2 id=&quot;4-我仍然喜欢洋紫荆&quot;&gt;4. 我仍然喜欢洋紫荆&lt;/h2&gt;

&lt;p&gt;我有一个好朋友，我曾告诉他我喜欢洋紫荆，那在枝头盛开的紫红五瓣总是笑得那么灿烂。&lt;/p&gt;

&lt;p&gt;最近和他见面了，路过看到满地盛开的红花羊蹄甲和一地落红，他说洋紫荆似乎没那么好看了。&lt;/p&gt;

&lt;p&gt;对呀，美丽的花很多，洋紫荆不如梅花气质佳，笑靥比不上锦簇的桃花，落下的花瓣也没有樱花那么娇小柔情。&lt;/p&gt;

&lt;p&gt;可是，我仍然喜欢洋紫荆，在绿色的心形叶间落落大方地绽放着，不卑不亢，不去讨人喜欢但依旧那么闪耀。&lt;/p&gt;

&lt;p&gt;而且，他让我第一次看到满树繁花的春天，算是一见钟情吧。&lt;/p&gt;

&lt;h2 id=&quot;5-谁不是把自己当成悲剧的主角呢&quot;&gt;5. 谁不是把自己当成悲剧的主角呢&lt;/h2&gt;

&lt;p&gt;看到落花时便会伤感，想起黛玉葬花，想起秒速五厘米。所谓的美，都是悲伤而来的。&lt;/p&gt;

&lt;p&gt;最近天气真冷啊，让人一点也不想学习。躲在被窝里的时候，我会幻想我自己是卖火柴的小女孩，在大年夜里孤身一人，划着卖不出去的小火柴，在美好的幻想中离去。&lt;/p&gt;

&lt;p&gt;悲惨的世界现实得不现实，让人感到虚幻，所以才美。高加索山的普罗米修斯，歌剧院的魅影，在命运的抗争中败下阵来的人才会悲凉而带有英雄的色彩。我们喜欢“孔雀东南飞”，我们爱唱“小白菜地里黄”，因为凄美能触动人心里最柔弱的部分。&lt;/p&gt;

&lt;p&gt;满怀悲情的活着，似乎也挺好。当悲剧的主角，岂不比平平的路人更好一些吗？&lt;/p&gt;

&lt;h2 id=&quot;6-我想成为你的光&quot;&gt;6. 我想成为你的光&lt;/h2&gt;

&lt;p&gt;我想成为你的光。&lt;/p&gt;

&lt;p&gt;不知道怎么就写下这句话，今天把一些想法写下来了，希望能成为一点点的荧光，照亮这个连接两年的晚上吧。&lt;/p&gt;

&lt;p&gt;2018.12.31 于佛山&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/31/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/31/post01/</guid>
        
        <category>生活</category>
        
        <category>文艺</category>
        
        
      </item>
    
      <item>
        <title>从卷积到傅里叶变换（一）</title>
        <description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;

&lt;p&gt;这是上学期期末考试前就想写的一篇文章了，因为之前看某文章时，发现自己对滤波还是有点不太明白，后来才发现是自己没有理解好什么是卷积。但一直拖到今天。&lt;/p&gt;

&lt;p&gt;一般来说，在图像处理中，卷积会是这样的含义。一个图像是一个大矩阵，使用一个小矩阵“卷积核”在图像上从左到右从上到下不断移动，每一次对重合部分对应元素相乘后求和，作为输出矩阵中的当前重合部分中心的值。这里有一张很腻害的动图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img01.gif&quot; alt=&quot;ru&quot; /&gt;
图片来源：&lt;a href=&quot;https://www.cnblogs.com/TextEditor/p/6667992.html&quot;&gt;[不定期更新长文]卷积神经网络工作原理研究&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这图看起来就很直观了嘛。&lt;/p&gt;

&lt;p&gt;可是当你搜索卷积，你就会看到这样的公式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img02.svg&quot; alt=&quot;ru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这到底是什么鬼啊？&lt;/p&gt;

&lt;h2 id=&quot;1-卷积&quot;&gt;1. 卷积&lt;/h2&gt;

&lt;p&gt;这就是卷积的定义啊，怎么理解？其实很简单，看看左边发现可以看作是自变量t的函数，也就是两个函数的卷积还是函数。&lt;/p&gt;

&lt;p&gt;所以这个结果就是t的一个映射，就是说，给定一个t值，就能通过某种方式得到对应的输出值，也就是说我们可以把所有t算出来。&lt;/p&gt;

&lt;p&gt;比如我这里画了个图，f(x)是一个高斯函数，g(x)是二次函数的一部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img03.png&quot; alt=&quot;ru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们算卷积是一个函数，不妨先记为y吧，我们算卷积就是要找出这个y的表达式子，或者说，是自变量x到y的映射——每给出一个x，得到一个y。那我们不妨先算一个特殊的x，比如给定x=2：&lt;/p&gt;

&lt;p&gt;我们算卷积f*g(x)在x=2时的值，此时x是常数，先不看积分号，发现就是两个函数的乘积：第一个函数是f(x)，第二个函数是g(x)的变形g(2-x)，我用python的matplotlib画出来了，其实就是将函数g(x)沿x轴翻折，然后再将翻折后的函数移动到x=2处，使得原来在原点的位置和当前要计算的自变量取值（x=2）重合。&lt;/p&gt;

&lt;p&gt;然后两函数相乘得到新函数f(x)g(2-x)，即图中透明的蓝色。那其实接下来的反常积分就是求新函数与x轴所夹的面积而已啦。计算到的这部分阴影面积就是x=2时卷积函数y的函数值啦。其中g(x)可以称卷积核函数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img04.png&quot; alt=&quot;ru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后我们就对所有x都可以按照这个算法算一次，每个x可以得到对应的值y。这个x到y的映射可以看成是函数记作y=(f*g)(x)，这个函数y就是g对f的卷积了。做了个动态图，看起来就是g在f上滑动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img05.gif&quot; alt=&quot;ru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;得到的结果有点奇怪（可能是dx精度的缘故？）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img06.png&quot; alt=&quot;ru&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-相关&quot;&gt;2. 相关&lt;/h2&gt;

&lt;p&gt;相关包括自相关（Auto-correlation）和互相关函数，互相关函数的定义如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018121201/img07.svg&quot; alt=&quot;ru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中*表示共轭复数，对于实数而言f*=f.&lt;/p&gt;

&lt;p&gt;而自相关就相当于自己跟自己做互相关。&lt;/p&gt;

&lt;p&gt;事实上卷积和相关的定义很类似，直观上差别就在于卷积中的g(x)函数水平翻转了。&lt;/p&gt;

&lt;p&gt;“相关”的定义在GNSS中也出现过“码相关”。&lt;/p&gt;

&lt;h2 id=&quot;3-滤波&quot;&gt;3. 滤波&lt;/h2&gt;

&lt;p&gt;滤波器 ，是信号处理中的一个概念，是用于去除信号中不想要的成分或者增强所需成分。其中较常听到的有低通滤波器和高通滤波器。&lt;/p&gt;

&lt;p&gt;简单来讲，低通滤波器容许低频信号通过，高通滤波器容许高频信号通过。应用到不同领域，这两个概念都分别有一些不同的表达术语，对低通滤波器，在图像处理里，就对应到边缘平滑、图像模糊，在时序预测里可以对应到平滑（比如各种moving average算法）。对高通滤波器，在图像处理里，就对应到边缘提取与边缘增强。&lt;/p&gt;

&lt;p&gt;那卷积又跟滤波有啥关系呢？卷积是一种数学方法，用在图像处理里，不但可以做滤波，还可以实现其他目的。&lt;/p&gt;

&lt;p&gt;总的来说，滤波是指从信号中剔除特定频率的波的过程，而该过程一般通过卷积来实现。&lt;/p&gt;

&lt;h2 id=&quot;4-二维卷积&quot;&gt;4. 二维卷积&lt;/h2&gt;

&lt;p&gt;二维卷积是一维卷积的推广，对于图像处理/卷积神经网络（CNN）的“卷积”概念其实是离散的二位卷积，更准确来说，我们一般意义上理解CNN中“卷积”其实是相关，但由于卷积核函数的参数是学习而来的故不影响逻辑。&lt;/p&gt;

&lt;p&gt;2018.12.12 于广州&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/12/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/12/post01/</guid>
        
        <category>信号</category>
        
        <category>数学</category>
        
        
      </item>
    
      <item>
        <title>Recurrent Neural Network</title>
        <description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;

&lt;p&gt;最近在写期末作业，写完了一片小论文，大概就是用一个循环神经网络模型给高光谱影像分类，中间加了一点点小trick之类的。&lt;/p&gt;

&lt;p&gt;整个过程中，反而感觉最有价值的是自己总结RNN和他的变体们的结构。在此把论文了的一部分记下来。&lt;/p&gt;

&lt;p&gt;循环神经网络（Recurrent Neural Network, RNN）简单来说是指具有循环单元的人工神经网络（Artificial Neural Network）。其实个人感觉RNN并没有很“深度”，所以说RNN是Deep Learning其实有点不太名副其实。而RNN早在上个世纪80年代就已经很多人在做了，而LSTM在90年代也已经被提出了，所以所谓RNN并不是什么新鲜事。&lt;/p&gt;

&lt;p&gt;但RNN被认为是有效处理序列数据的模型，他在最主要是在机器翻译中取得的很好的效果，也因此备受关注。&lt;/p&gt;

&lt;h2 id=&quot;1-rnn&quot;&gt;1. RNN&lt;/h2&gt;

&lt;p&gt;我们说RNN是有循环单元的神经网络，那么什么是循环单元呢？就是像下图所示，那个圈圈就表示一个循环。看不懂？其实他可以展开（unfold）成右边的样子就好懂了。有一个常常听到的说法就是单元在当前时间步的输出不仅和当前输入有关，还和上一次输入有关。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img03.jpg&quot; alt=&quot;ru&quot; /&gt;
图片来源：&lt;a href=&quot;https://zybuluo.com/hanbingtao/note/541458&quot;&gt;零基础入门深度学习(5) - 循环神经网络&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;说的很玄乎，其实想要理解最好就是看公式啦。&lt;/p&gt;

&lt;p&gt;其实下面就是将RNN的循环单元的前向传播过程复述一遍而已啦。&lt;/p&gt;

&lt;p&gt;我截一个我写的课程论文里的图来说明。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img01.PNG&quot; alt=&quot;rnn_math&quot; /&gt;&lt;/p&gt;

&lt;p&gt;给定一个序列样本x，这个x其实是一个矩阵，我们将他写出含有m个向量的向量吧，像上面截图说的。
注意这里不是有m个样本哦，而是一个样本就有m个向量，每个向量的先后顺序是固定的，对于一个循环单元他展开后相当于有m个“小单元”，我们不妨称之为时间步（timestep）吧。每个时间步可以有他自己的隐藏状态h。&lt;/p&gt;

&lt;p&gt;h怎么算呢？就会式子（1）写得这样。&lt;/p&gt;

&lt;p&gt;第0个状态，也就是初始状态要我们自己给定，经验上一般都设定为零向量。然后第t个h可以写成第t个（当前）时间步的输入和第t-1个（上一个）时间步的h的函数。是什么函数？怎么定义都行啦。一般的RNN会把它定义成像式子（3）那样，就是一般的广义线性模型（普通的神经元）。有没有感觉和Markov的感觉很像呢？&lt;/p&gt;

&lt;p&gt;但这个h是不输出的，输出的y还会有一个函数对隐藏状态进行处理，其实就是再套一层而已啦，像式子（2）所示，具体到传统RNN就可以写成式子（4）那样。&lt;/p&gt;

&lt;p&gt;我们举个例子来再过一次前向传播过程，假设我们观察一个小姐姐，观察她好多天，每天24小时都记下他的表情。我们就可以把每一天当成是一个样本x，这里m=24，xt表示小姐姐今天第t小时的心情。然后我们算h，h0的时候我们就设为0向量，毕竟小姐姐在碎美容觉嘛，然后我们算h1，把1点钟小姐姐的心情x1和h0代入函数h()，算出了h1。然后h1又用来配合x2算出h2，一直算到h24。接下来我想要输出的话，就讲h1到h24代入y()，就可以算出y1到y24，我们不管y到底是表示小姐姐穿的小裙子还是小姐姐的什么，反正算出了个用来输出的值就是了。&lt;/p&gt;

&lt;p&gt;把循环单元的结构画成图的话就是像图1这样。是不是很简单？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img02.PNG&quot; alt=&quot;rnn_graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果还不懂，看这张图直接粗暴地画出来传统RNN的整体结构哦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img04.jpg&quot; alt=&quot;rnn_3d&quot; /&gt;
图片来源：&lt;a href=&quot;https://www.zhihu.com/question/41949741/answer/318771336&quot;&gt;LSTM神经网络输入输出究竟是怎样的？ - Scofield的回答 - 知乎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RNN的求解不是普通的BP算法，用的是BPTT，这里因为懒所以就不写了。&lt;/p&gt;

&lt;h4 id=&quot;关于rnn的输入输出&quot;&gt;关于RNN的输入输出&lt;/h4&gt;

&lt;p&gt;一般来说，按照输入输出，RNN解决的问题可以氛围：end2end，end2seq，seq2end，seq2seq。也就是输入输出分别是端（end）和序列（seq）。端就是指单个向量，序列就是只一列向量，但向量与向量之间是有序的。&lt;/p&gt;

&lt;p&gt;举几个例子，比如我今天看到一只小姐姐，我把她的皂片（或者是升高，语调等等的特征向量）输入RNN，可以知道这个小姐姐是萝莉还是御姐，这个就是end2end模型。&lt;/p&gt;

&lt;p&gt;如果我把她的照片输入RNN,可以知道搭讪这个小姐姐时说什么话最容易勾搭到这个小姐姐，那么这个就是end2seq模型。因为说的话是句子，也就是词语的序列，词语的先后顺序是会影响句子的含义的，所以是一个序列。&lt;/p&gt;

&lt;p&gt;如果我把一句话输入到模型得到我能否勾搭上小姐姐得到的就是seq2end模型，同样的，如果我把一句话输入到模型里得到小姐姐回复我会说的话，那就是seq2seq模型。&lt;/p&gt;

&lt;p&gt;其实这4个模型对应的应用可以是：图片分类（end2end）、图片概述（对图片生成一句话描述，end2seq）、有序序列分类（如高光谱像元分类，seq2end）、机器翻译与对话机器人（seq2seq）。&lt;/p&gt;

&lt;p&gt;四种的输入结构是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img05.PNG&quot; alt=&quot;rnn_io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片截图：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22107715&quot;&gt;[原创翻译]循环神经网络惊人的有效性（上） - 杜客的文章 - 知乎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果输入是一个序列（seq），我们就在相应时间步输入对应时间的向量，如果输入是一个端（end），我们就在每个时间步都输入同样的向量。如果输出是一个end我们就取最后一次输出（或者是多个时间步输出求平均等），如果输出是一个seq那么我们就将每个时间步的输出做成一个序列就ok了。&lt;/p&gt;

&lt;h2 id=&quot;2-lstm&quot;&gt;2. LSTM&lt;/h2&gt;

&lt;p&gt;长短时记忆模型（Long Short-Term Memory， LSTM）刚刚提到它在1990年代就被提出了。它最主要就是解决了RNN中的长距离依赖问题（Long-distance Dpendence)。请注意LSTM的英文里，ST是Short-term，而它前面的L代表Long和Short-term是用空格隔开的。&lt;/p&gt;

&lt;p&gt;其实我一开始以为LSTM就是又短又长，既能搞定短距离又能记住长距离的，但其实人家的意思是能够持续比较长时间的短期记忆，wiki是这样写的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The expression long short-term refers to the fact that LSTM is a model for the short-term memory which can last for a long period of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;LSTM可以解决长距离依赖问题，处理RNN在长序列容易梯度弥散或梯度爆炸的问题，也就是说LSTM能让RNN真正“deep”起来。且不说效果好不好，至少能够“deep”。&lt;/p&gt;

&lt;p&gt;所谓长距离依赖就是说当序列变长，RNN就变得无法连接时间步相隔较大的信息，也就是说最开始的输入到了后面就没什么卵用了。&lt;/p&gt;

&lt;p&gt;LSTM看似很玄，但只要记住它再强，它始终是一个RNN。他的结构就是下面这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img06.PNG&quot; alt=&quot;lstm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的结构和RNN本质是一样的，把黑框看成黑箱子，他们的输入都是前一步的状态h_t-1和当前的输入x_t，只是隐藏状态变成了两个，原来只有一个h，LSTM则有一个c和一个h。c被称为细胞状态，h有点像传统RNN里的y但它同时会参与下一个时间步的输入。&lt;/p&gt;

&lt;p&gt;LSTM的内部结构主要是三个“门结构”（gate），包括遗忘门，输入门，输出门。“门”就是一个信息过滤器，也就是选择性地让信息通过一部分，看公式，发现他本质就是一个logistics回归，用了是一个sigmoid函数，其巧妙之处在于它选择性的让过去的信息通过（遗忘门），也选择性地让当前输入进入（输入门）。而sigmoid的值域是0到1，因此，可以把它理解成一个遗忘和记忆的概率。&lt;/p&gt;

&lt;p&gt;LSTM的具体理解，请务必看这篇文章，写得实在是太好了：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://colah.github.io/posts/2015-08-Understanding-LSTMs/&quot;&gt;Understanding LSTM Networks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/9dc9f41f0b29&quot;&gt;[译] 理解 LSTM 网络&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-gru&quot;&gt;3. GRU&lt;/h2&gt;

&lt;p&gt;门循环单元（Gated Recurrent Unit， GRU）是LSTM的变体之一。在实践中，发现GRU参数更少，更容易训练，在某些问题能比LSTM效果更好。至少在高光谱分类中，GRU优于LSTM。&lt;/p&gt;

&lt;p&gt;事实上，LSTM那么多变体里面，并没有哪一个是比其他更好，只是各自在不同问题中有不同优势而已。&lt;/p&gt;

&lt;p&gt;GRU和LSTM的区别在于，它的隐含状态只有一个h，同时这也是他的对应时间步的输出。对比LSTM的三个门结构，GRU只有更新门和重置门两个门结构，因此其参数也比较少。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img07.PNG&quot; alt=&quot;gru&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-双向rnn与多层rnn&quot;&gt;4. 双向RNN与多层RNN&lt;/h2&gt;

&lt;p&gt;RNN往继续拓展的话就有双向RNN和多层RNN。刚刚讲的LSTM和GRU是通过改变循环单元内部结构来改进RNN的。而双向RNN与多层RNN则是堆叠RNN得到一个更大更强的模型。&lt;/p&gt;

&lt;p&gt;双向RNN是认为序列信息既与前面的时间步有关，又和后面的时间步有关，因此我正反各输入一次不就可以了吗。至于输出，就是两个RNN的加和。&lt;/p&gt;

&lt;p&gt;多层RNN就是有多个隐藏层（隐藏状态h）而已。&lt;/p&gt;

&lt;p&gt;下面两图分别是双向RNN和多层RNN的结构图，图源自&lt;a href=&quot;https://zybuluo.com/hanbingtao/note/541458&quot;&gt;零基础入门深度学习(5) - 循环神经网络&lt;/a&gt;,这篇文章也写得很好，值得一读。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img08.png&quot; alt=&quot;birnn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img09.png&quot; alt=&quot;mulrnn&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-encoding-decoding与attention&quot;&gt;5. Encoding-Decoding与Attention&lt;/h2&gt;

&lt;p&gt;Encoding-Decoding在seq2seq的问题中比较有意义。其概念在于用一个编码器（Encoder）给序列编码，得到一个中间向量，再用一个解码器（Decoder）给中间向量解码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img10.jpg&quot; alt=&quot;gru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后有人在Encoding-Decoding中引入了注意力机制（Attention model）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018062401/img11.jpg&quot; alt=&quot;gru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片来源：&lt;a href=&quot;https://blog.csdn.net/tg229dvt5i93mxaq5a6u/article/details/78422216&quot;&gt;深度学习中的注意力机制&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很多时候RNN其实不好计算，因为RNN的输入跟前一时间步有关，因此不好并行，所以很多人开始转向别的模型。如ResNet和Attention模型。&lt;/p&gt;

&lt;p&gt;2018.06.24 于广州&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/24/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/24/post01/</guid>
        
        <category>机器学习</category>
        
        <category>深度学习</category>
        
        <category>算法</category>
        
        
      </item>
    
      <item>
        <title>Batch Gradient Descent</title>
        <description>&lt;h2 id=&quot;0-前言&quot;&gt;0. 前言&lt;/h2&gt;

&lt;p&gt;上一次写blog居然已经是4个月之前了，这学期课虽不多，但各种零零散散的事情总是在忙，再加上上半学期几乎天天都要早起，也不知道为什么我还天天都晚睡，然后就很累。&lt;/p&gt;

&lt;p&gt;这周是期中考假期，一周下来好像没干啥，值得纪念的就是天天在外面各种地方吃了许多奇奇怪怪的好吃的，嗯，真难得有机会出去玩。昨天在机房值班，天气颇好，卡了很久的作业又有了做下去的方向，心情十分舒畅，于是花了一个多小时造了个轮子（写了一个梯度下降）。稍微整理一下，写一篇blog当作笔记吧。&lt;/p&gt;

&lt;p&gt;讲真，到现在为止我也没有自己实现过梯度下降的算法，于是我很兴奋地就开始干了。&lt;/p&gt;

&lt;p&gt;梯度下降原理很简单，我也不知道为什么各种书讲得很不清楚（其实是太多细节导致乍一看抓不住主干）。&lt;/p&gt;

&lt;p&gt;梯度下降和最小二乘法有点像，梯度下降可以用来求解最小二乘法问题，但除此之外，还能求解其他得优化问题。&lt;/p&gt;

&lt;p&gt;可以说，只要是函数，都能用梯度下降来求最小值，不过求到得也只能是局部最小值。&lt;/p&gt;

&lt;h2 id=&quot;1-机器学习的套路&quot;&gt;1. 机器学习的套路&lt;/h2&gt;

&lt;p&gt;不管你听哪个老师的课，看哪一本机器学习的书，一开始讲有监督学习时基本上是这个三步走套路，我称之为HLO——Hypothesis，Loss，Optimization。&lt;/p&gt;

&lt;p&gt;首先要明确有监督学习要解决的问题：给定特征x，求一个y。这个y可以是连续的、也可以是离散的，y连续时就是回归问题，y离散时就是分类问题。如果我给了你很多x和对应的y，下次我给你新的x你能不能算出对应的y呢？&lt;/p&gt;

&lt;h6 id=&quot;1-hypothesis&quot;&gt;[1] Hypothesis&lt;/h6&gt;

&lt;p&gt;对于一个n维向量&lt;img src=&quot;/img/in-post/2018051301/math01.png&quot; alt=&quot;x&quot; /&gt;定义函数&lt;img src=&quot;/img/in-post/2018051301/math02.png&quot; alt=&quot;htx&quot; /&gt;该函数称为Hypothesis，我们假设通过该函数可以算出预测值。值得一提的是，这里的m维向量&lt;img src=&quot;/img/in-post/2018051301/math03.png&quot; alt=&quot;htx&quot; /&gt;
是参数，θ只要确定了，函数就能确定，但因为有很多个θ，所以Hypothesis可以看成是一个函数集合，我们要做的就是从所有θ的组合中找出最优秀的θ，确定h(x)。&lt;/p&gt;

&lt;h6 id=&quot;2-loss&quot;&gt;[2] Loss&lt;/h6&gt;

&lt;p&gt;算出的预测值和真实值y还是有区别的，所以我们定义了一个Loss函数&lt;img src=&quot;/img/in-post/2018051301/math04.png&quot; alt=&quot;loss&quot; /&gt;以量化这种区别，一般来说我们会使得Loss随着预测值接近真实值y而变小。&lt;/p&gt;

&lt;h6 id=&quot;3-optimization&quot;&gt;[3] Optimization&lt;/h6&gt;

&lt;p&gt;对于同样的x，不同的θ算出不同的预测值，因此Loss也会不同，所谓“最优秀的”θ，就是使得Loss最小的θ嘛！那么，我们实际上就是求Loss的最值问题，也就是优化问题（Optimization）。&lt;/p&gt;

&lt;h2 id=&quot;2-least-square&quot;&gt;2. Least Square&lt;/h2&gt;

&lt;p&gt;说起Gradient Descent就会让人想起Least Square。&lt;/p&gt;

&lt;p&gt;我们看看Loss函数，简单粗暴地算预测值和真实值y的差，取平方去掉正负号，故有&lt;img src=&quot;/img/in-post/2018051301/math05.png&quot; alt=&quot;x&quot; /&gt;
这里N是所有训练样本，这个函数越小，预测值自然越接近真实值y。&lt;/p&gt;

&lt;p&gt;最值处的必要条件就是导数为零（最值点必为极值点），于是，简单粗暴地求偏导并使之为零。&lt;img src=&quot;/img/in-post/2018051301/math06.png&quot; alt=&quot;p0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解这个方程，解的θ就是极值点。对于L为凸函数的问题，该方程只有一个解，非凸的话自然有多个解，如果能求到多个解自然可以比较多个解里面那个θ更优秀啦，可是很难把所有解都找出来。&lt;/p&gt;

&lt;p&gt;凸函数问题的话，最典型的就是线性回归了，一般我们第一次接触最小二乘都是在学线性回归的时候，也就是定义&lt;img src=&quot;/img/in-post/2018051301/math07.png&quot; alt=&quot;p0&quot; /&gt;考虑bias的话
&lt;img src=&quot;/img/in-post/2018051301/math08.png&quot; alt=&quot;x_bias&quot; /&gt;
然后求Loss的的偏导数，直接解方程，可以得到具体得公式，这种可以将解用通式表示的解的形式叫closed-form。不是closed-form的可以用迭代法来求解，迭代法常用的有Newton’s Method，还有就是我们这里的Gradient Descent了。&lt;/p&gt;

&lt;p&gt;小结一下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最小二乘的本质就是定义了一个Loss函数。&lt;br /&gt;
梯度下降是求解最小二乘的一种算法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-gradient-descent&quot;&gt;3. Gradient Descent&lt;/h2&gt;

&lt;p&gt;然后我们就开始讲Gradient Descent了。&lt;/p&gt;

&lt;p&gt;我们可以暂时忘记最小二乘了，要把握住算法，最重要地是丢掉细枝末节，我们这里地Loss是可以任意定义地，它就是一个函数&lt;img src=&quot;/img/in-post/2018051301/math04.png&quot; alt=&quot;loss&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的问题仍旧是：找一个θ使得Loss最小。&lt;/p&gt;

&lt;p&gt;梯度下降的做法是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先随便瞎猜一个θ;&lt;/li&gt;
  &lt;li&gt;然后把Loss看成θ的函数,计算Loss的梯度∇L，根据梯度更新θ;&lt;/li&gt;
  &lt;li&gt;不断重复第2步使得Loss基本不变.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更新梯度的公式为&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018051301/math09.png&quot; alt=&quot;gd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的α是学习率，简单理解就是参数更新的步长，从初始的θ开始移动改变θ，算出的梯度∇L是运动的方向，而α则是我们移动的步长了。常见的说法就是，在山地里面我们不断寻找最陡峭的地方往下走，这样总会找到一个局部最低点。&lt;/p&gt;

&lt;p&gt;有一个无聊的人（误）录了一个视频 &lt;a href=&quot;https://www.youtube.com/watch?v=1_HBTJyWgNA&amp;amp;index=6&amp;amp;list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49&quot;&gt;李宏毅 - ML Lecture 3-2: Gradient Descent (Demo by AOE)&lt;/a&gt;，讲世纪帝国里是怎么做的Gradient Descent的。&lt;/p&gt;

&lt;h2 id=&quot;4-计算梯度&quot;&gt;4. 计算梯度&lt;/h2&gt;

&lt;p&gt;以上提到的最难的步骤就是计算梯度∇L了，实际上就是分别对各个θ求偏导数而已&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018051301/math10.png&quot; alt=&quot;grad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的t是指当前已经迭代的次数，而我们知道求偏导数实际就是求一元倒数，所谓导数就是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018051301/math11.png&quot; alt=&quot;div&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们将h设成一个很小很小的数，直接代入就能求到近似解了，求到梯度之后就是不断重复迭代就行了。&lt;/p&gt;

&lt;h2 id=&quot;5-python实现&quot;&gt;5. Python实现&lt;/h2&gt;

&lt;p&gt;首先定义Hypothesis Function和Loss Function：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# define hypothesis function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hypothesis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# define you hypothesis function here...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# define loss function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# define you loss function here...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hypothesis就是我们的机器学习模型，定义成参数和特征（自变量）的函数，基于Hypothesis定义合适的Loss，一般来说Loss的输入包括了Hypothesis的输入，同时还需要输入实际值/Ground True（因变量）。&lt;/p&gt;

&lt;p&gt;这里没有定义具体的Hypothesis和Loss，因为我们主要目的是实现梯度下降的算法。&lt;/p&gt;

&lt;p&gt;再次明确我们的目的：优化Loss，求使得Loss为局部最小值时的θ。&lt;/p&gt;

&lt;p&gt;首先,定义计算梯度的函数，该函数的输入和Loss一样，这里的是依次对各个求导，注意自变量是P，输入X、Y一般是训练样本。直接用导数的定义公式，把dh设成1e-7(足够小的值)。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# count gradient&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-7&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dh&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dh&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后定义每一次迭代更新参数的方法，也就是输入当前参数，返回下一参数。每一次计算就是参数减去学习率乘以梯度。最后整个BGD的实现就是循环多次这一步而已。这里lr就是学习率，init_P是初始的参数，X、Y是训练样本，niter是迭代次数，这里每迭代一定次数（vbose）打印一下当前的Loss。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# BGD Algorithm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;niter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_P&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;niter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iter:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, loss: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-例子&quot;&gt;6. 例子&lt;/h2&gt;

&lt;p&gt;为了测试我们的算法，我写了两个例子，试运行了一下。&lt;/p&gt;

&lt;h5 id=&quot;1-多元线性回归&quot;&gt;1. 多元线性回归&lt;/h5&gt;

&lt;p&gt;定义多元线性回归的函数，h(X)=PX。基于最小二乘原理定义损失函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def hypothesis(P, X):
    # h(X) = PX
    bias = np.ones(X.shape[:-1])
    input_ = np.insert(X, -1, bias, axis=-1)  # channel_last
    return np.dot(input_, P)

def loss(P, X, Y):
    # Square Loss
    d = (Y - hypothesis(P, X)) ** 2
    return np.sum(d) / len(d)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成一些随机样本，这里设置3个自变量，因此有4个参数（还有一个常数项），生成2000个随机的X并求出对应Y。这里还加了一点噪声。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;X = np.random.rand(2000, 3)                                # random samples
para_t = np.array([115, -12, -3, 44],dtype=np.float64)     # true_parameters
Y = hypothesis(para_t, X) + np.random.rand(1)
print(X)
print(Y)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为是凸优化，所以是唯一解，不用考虑局部最优，所有随意初始化都能求到结果啦。那我们初始化参数设为0，开始训练，然后把参数打印一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;para = np.array([0, 0, 0, 0],dtype=np.float64)              # init_para
print(&quot;Para_h: %s&quot; % BGD(0.01, 10000, para, X, Y))
print(&quot;Para_t: %s&quot; % para_t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iter:0, loss: 6051.55206953
iter:1000, loss: 51.0304688772
iter:2000, loss: 5.0273756556
iter:3000, loss: 0.68016847629
iter:4000, loss: 0.101467038909
iter:5000, loss: 0.0154896290322
iter:6000, loss: 0.00237660362235
iter:7000, loss: 0.000365047416709
iter:8000, loss: 5.60845545895e-05
iter:9000, loss: 8.61695483353e-06
Para_h: [ 114.99777458  -12.0023768    -2.05467269   43.99780741]
Para_t: [ 115.  -12.   -3.   44.]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para_h是我们拟合出来的参数，Para_t是真实的参数（基于这个函数生成模拟样本的），解这个就是a peace of cake啦。&lt;/p&gt;

&lt;h5 id=&quot;2-简单的人工神经网络&quot;&gt;2. 简单的人工神经网络&lt;/h5&gt;

&lt;p&gt;数据是Nerlove收集的1955年145家美国电力企业的总成本(TC)、产量(Q)、工资率(PL)、燃料价格(PF)及资本租赁价格(PK)，X为(Q, PL, PF, PK)，Y为TC。&lt;/p&gt;

&lt;p&gt;别听神经网络好像很腻害的样子，本质就是花式堆叠广义线性回归。还是先定义Hypothesis和Loss，这里定义了一个reLU函数作为激活函数，Hypothesis是一个只有两个隐含层的神经网络，输入层有4个神经元，第一层有6个神经元，第二层有3个神经元，一共有47个参数。&lt;/p&gt;

&lt;p&gt;reLU定义如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2018051301/math12.png&quot; alt=&quot;div&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def reLU(X):
    return X * (X &amp;gt; 0)

def hypothesis(P, X):
    # ANN(2 Layers)
    p1 = P[:5]
    p2 = P[5:10]
    p3 = P[10:]
    bias = np.ones(X.shape[:-1])
    input_ = np.insert(X, -1, bias, axis=-1)  # channel_last
    nn11 = reLU(np.dot(input_, p1))
    nn12 = reLU(np.dot(input_, p2))
    nn1 = np.stack([nn11, nn12, bias], axis=-1)
    return reLU(np.dot(nn1, p3))

def loss(P, X, Y):
    # Square Loss
    d = (Y - hypothesis(P, X)) ** 2
    return np.sum(d) / len(d)

# Load Data
data = np.loadtxt(r'data.csv', delimiter=',')
Y = data[:, 0]
X = data[:, 1:]
X.shape            # (145L, 4L)

# get train sample and test sample
N = 100
Ytrain = Y[:N]
Xtrain = X[:N, :]
Ytest = Y[N:]
Xtest = X[N:, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一共145个样本，我们用100个做训练，45个做测试，先跑一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;para = np.random.rand(47)
print(para)
print(BGD(1e-3, 5000, para, Xtrain, Ytrain, 1000))
print(&quot;RMSE:%s&quot; % loss(para, Xtest, Ytest) ** 0.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iter:0, loss: 32.43822935
iter:1000, loss: 32.43822935
iter:2000, loss: 32.43822935
iter:3000, loss: 32.43822935
iter:4000, loss: 32.43822935
RMSE:41.5248204328
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现结果坏掉了，打印一下预测值，发现全部变成0了，再打印一下梯度。发现梯度全是0，这就是传说中的Gradient Vanish，在神经网络多层传播后，参数的变动很有可能无法计算出梯度（梯度弥散，Gradient Vanish），又或者参数的微微变动就会导致梯度骤变（梯度爆炸，Gradient Explosion）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Y_hat, Y, dY
[[  -0.      11.982   11.982]
 [  -0.      16.674   16.674]
 [  -0.      12.62    12.62 ]
 [  -0.      12.905   12.905]
 ...]
...
 [ 0.  0.  ...  0.  0.]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;事实上我们这里算出来的梯度也是很大的，因此把学习率调成了一个很小的值（1e-7），再多跑几次（使得初始化参数落到了一个比较好的位置上）。出来的结果还是能看的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iter:0, loss: 56115.2138837
iter:1000, loss: 2.58377124655
iter:2000, loss: 2.20030671483
iter:3000, loss: 1.88540868509
iter:4000, loss: 1.6693258371
RMSE:10.2699172204
...
Y_hat, Y, dY
[[  12.94779536   11.982        -0.96579536]
 [  13.91592103   16.674         2.75807897]
 [  14.50662844   12.62         -1.88662844]
 [  13.98164501   12.905        -1.07664501]
 ...]
...
[  186.86534503 -4.51131314 ... 2328.47006998 4.02859825]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;7-总结&quot;&gt;7. 总结&lt;/h2&gt;

&lt;p&gt;大概写了一下BGD的笔记，还是有一点收获的，也算是加深了对梯度下降理解啦。&lt;/p&gt;

&lt;p&gt;不过不知道为什么，代码只写了不到一个小时，写blog却写了一天（心累）。&lt;/p&gt;

&lt;p&gt;代码已上传到&lt;a href=&quot;https://github.com/codeRimoe/ML_demo/tree/master/MLD01_BGD&quot;&gt;Github - MLD01_BGD&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;2018.05.13 晚上 于广州&lt;/p&gt;
</description>
        <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/13/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/13/post01/</guid>
        
        <category>机器学习</category>
        
        <category>深度学习</category>
        
        <category>算法</category>
        
        
      </item>
    
      <item>
        <title>随笔偶成</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;知乎上，看到了一个问题，如何评价&lt;a href=&quot;https//mp.weixin.qq.com/s/nZulTHBPbd9Panc7XSciyQ&quot;&gt;《可怕的是，我们的孩子一直在通过动漫认识世界》&lt;/a&gt;一文。于是我便写了本文，原回答为&lt;a href=&quot;https://www.zhihu.com/question/265391277/answer/293707377&quot;&gt;如何评价《可怕的是，我们的孩子一直在通过动漫认识世界》一文？ - 罗玥的回答 - 知乎&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;总的来说，&lt;strong&gt;原文借“动漫”这一个热点，以一个不当的点切题，举一系列不正确的例证，来说明一个正常人都应该知道的常识&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;1-片面描述动画内容错误引导读者&quot;&gt;1. 片面描述动画内容，错误引导读者&lt;/h2&gt;

&lt;p&gt;原文取优酷和B站前三来作为“孩子“群体的动漫观影偏好，这一点本身是有偏的，优酷、B站的用户群年龄文中未考虑，而而且原文未作对“孩子”的定义。&lt;/p&gt;

&lt;p&gt;此外，原文对动漫作品的污名化可以说是十分不讲道理了。&lt;/p&gt;

&lt;p&gt;原文对《火影忍者》是这样描述的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;总的来说，《火影忍者》是一部针对性的描写仇恨的作品，因此也有一定的悲剧成分在里面，主题的最终目的性是于化解仇恨，歌颂和平，但&lt;strong&gt;内容方面以战斗和厮杀为主&lt;/strong&gt;。抛开里面的暴力画面，他的三观细看有许多扭曲的地方。&lt;br /&gt;
比如主角每次都喊着一个伟大的目标“我要当火影”，但平时却不怎么努力，&lt;strong&gt;总是拥有“主角特殊光环”&lt;/strong&gt;，一遇到事儿就临时抱佛脚，还总是能化险为夷；&lt;br /&gt;
比如故事中的友情观也是奇葩，&lt;strong&gt;为了保护朋友什么事儿都干得出来&lt;/strong&gt;，是一种非常偏激的友情观，爱情也是一样，基本都是生离死别，十分沉重；&lt;br /&gt;
比如其中的正义也是非常奇葩，很多台词都是正义的旗号，但基本上都非常肤浅又莫名其妙，男二号“佐助”的正义观更是满腹槽点，但却被很多粉丝着迷，&lt;strong&gt;这其中的人物极端理想化，正义极端化，盲目的积极向上&lt;/strong&gt;，盲目的友谊和爱情，对于异己一律都是强行洗脑模式，也难怪被认定成年观众级别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这段批驳，我认为是不成立的，至少这一段话套在别的作品中同样成立。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;总的来说，&lt;strong&gt;抗日电视剧&lt;/strong&gt;是一系列针对性的描写仇恨的作品，因此也有一定的悲剧成分在里面，主题的最终目的性是于化解仇恨，歌颂和平，但&lt;strong&gt;内容方面以战斗和厮杀为主&lt;/strong&gt;。抛开里面的暴力画面，他的三观细看有许多扭曲的地方。&lt;br /&gt;
比如主角每次都喊着一个伟大的目标&lt;strong&gt;“打倒日本帝国主义”&lt;/strong&gt;，但总是拥有“主角特殊光环”，一遇到事儿总是能化险为夷；&lt;br /&gt;
比如故事中的&lt;strong&gt;爱国观&lt;/strong&gt;也是奇葩，&lt;strong&gt;为了保护战友和国家什么事儿都干得出来&lt;/strong&gt;，是一种非常偏激的&lt;strong&gt;价值观&lt;/strong&gt;，爱情也是一样，基本都是生离死别，十分沉重；&lt;br /&gt;
比如其中的正义也是非常奇葩，很多台词都是正义的旗号，但基本上都非常肤浅又莫名其妙，&lt;strong&gt;这其中的人物极端理想化，正义极端化，盲目的积极向上&lt;/strong&gt;，盲目的&lt;strong&gt;爱国&lt;/strong&gt;和爱情，对于异己一律都是强行洗脑模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（此外，文中还提到大部分动漫作品&lt;strong&gt;追求和平的手段依然是暴力&lt;/strong&gt;，而且，他认为这是扭曲的价值观。而这个价值观并没有扭曲，在别无他法的时候，采用暴力追求和平是没有错的。大家总是瞎嚷嚷“犯我中华者虽远必诛”的时候并没有认为自己价值观有问题吧？南京起义的时候、抗日战争的时候，不扛起枪谁给你和平？在恐怖分子咄咄逼人的时候，是谁维护我们社会的和平？非暴力不抵抗的甘地吗？要知道，日常维持法律的公安、检察、法院、监狱的本质就是暴力机关。虽然跑题了，但这点还希望原文作者思考一下。）&lt;/p&gt;

&lt;p&gt;对《干物妹小埋》的描述也是主观带着偏见的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这部动漫主要讲述的也就是小埋和哥哥在一起的“吃、睡、玩”的干物妹生活，主角小埋&lt;strong&gt;又懒又馋可是漂亮&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“小埋又懒又馋可是漂亮”这样的表述明显是有偏向性的，文中还列出一系列的截图，反映了小埋在家里懒散的一面，却对小埋在学校在其他人面前的优秀表现避而不谈，以证明该动漫三观不正的结论。小埋这一角色最大的特点就是，既有外人面前优秀的一面，又有对哥哥撒娇的一面，仅以一面作为对作品中的角色进行描述都是有失偏颇的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;就连制作组在制作时也刻意回避了小埋他哥为什么要忍受小埋的任性，而对小埋一再纵容和宠爱。因为这个问题是个炸弹，无论怎么去解释处理，小埋这么做都是不合理而且错误的。只会加大观众的厌恶感和不适感。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;制作组从未回避过小埋哥哥对小埋的态度，如果你真的了解过这一部作品，你就知道，小埋哥哥对小埋的懒散并没有纵容，对于小埋在家的懒散表现，小埋哥哥总是会厉声训斥的。&lt;/p&gt;

&lt;p&gt;《干物妹小埋》这部作品中最突出表现的是小埋日常和他的好朋友们玩耍学习的场景，可以说是三观十分正确的一部作品了。&lt;/p&gt;

&lt;p&gt;不知原文作者是对动画很了解还是很不了解，在他笔下任何一个动画都能以特殊的视角描述成反面的，更具体地说，&lt;strong&gt;任何一个作品都能被描述成反面的&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有一些动漫，儿童观看确实过于血腥，比如文化部就曾禁止过一批动漫，但这些动漫并没有在网络上停止传播，孩子依然可能会看到，而且像《寄生兽》、《东京食尸鬼》、《黑执事》和《进击的巨人》这些还很火。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然这里&lt;strong&gt;不否认动漫中存在一些血腥、暴力的行为&lt;/strong&gt;。“有一些动漫，儿童观看确实过于血腥”，对于文中这一点，我是十分认同的。可是，这类作品本身就不是面向儿童群体的，在日本，这一类的动画播放时间是深夜凌晨，刻意回避了儿童群体，此外，在国外，影视作品分级制度十分完善，因此，儿童很难会受到作品的影响。然而，在中国的情况却是一刀切，我们可以看到一些优秀的作品被禁播，同时另一些儿童不宜的作品却允许全年龄人群观看。去年，《战狼》热播，在电影院里我看到有家长带着孩子来看，其中一些血腥的打斗场景难道不也是儿童不宜吗？&lt;strong&gt;缺乏分级制度，才是导致儿童观影时接受不宜信息的根本原因&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;2-以错误例子夸大动漫的不良影响&quot;&gt;2. 以错误例子夸大动漫的不良影响：&lt;/h2&gt;

&lt;p&gt;文中举了数例案件，以图证明动漫对人产生不良影响。其例证大致可以分为以下两类：&lt;/p&gt;

&lt;h5 id=&quot;1-成年人的不理智行为&quot;&gt;1. 成年人的不理智行为&lt;/h5&gt;

&lt;p&gt;原文作者以“你要扣了我的车，我就毁灭地球”、“90后女效仿红太郎将70后老公拍成植物人”这两例案件举例，以图例证动漫导致这些不良后果。&lt;/p&gt;

&lt;p&gt;但是看动漫的人这么多，能出这种新闻的人有几个？以偏概全，&lt;strong&gt;用几个离群值表征全体样本&lt;/strong&gt;，这种低级的统计错误在原文作者的包装下，变成了误导读者的trick。一个人成长过程中，价值观没有培养好，无论他有没有看动漫，他最终都会做出类似的事情。诚然，动漫对一个人价值观的形成是有影响的，可是我不认为这种影响一定是负面的。就像科学对人的价值观的影响，有人最终成为学者，有人最终成为民科，你不能就此说科学对人的影响是正面还是负面的。&lt;/p&gt;

&lt;h5 id=&quot;2-未成年人的不良行为&quot;&gt;2. 未成年人的不良行为&lt;/h5&gt;

&lt;p&gt;“模仿动画片跳楼”、“偷钱买书”、“模仿猪叫”这几例，则是着重表现动漫导致“未成年人的不良行为”。&lt;/p&gt;

&lt;p&gt;首先，“模仿动画片跳楼”中的责任不在动画片，而在监护人。在我国法律中，8岁以下属于“无民事行为能力人”，8-16岁或16-18岁不以自己收入为生活来源的人属于“限制民事行为能力人”。对于未成年人的不良行为，难道不是监护人未做好监管职责吗？幼童坠落事件在家长监护下是不应该发生的。几个月前，我陪我的小外甥女玩，他套上游泳圈说要去马路上游泳，我跟他说不可以。同样地，如果一个小朋友说要飞起来，你会让他跳下去吗？作为儿童地陪同人，就应该负起自己地监管责任。&lt;/p&gt;

&lt;p&gt;至于“偷钱买书”、“模仿猪叫”这些例证根本就站不住脚，谁小时候没犯过错误，谁小时候没干过蠢蠢的事情？我小时候就经常偷家里的零钱去买辣条，也经常和隔壁家的男孩子比赛看谁叫的更像门口的那只黄狗。但我最后不也好好地长大吗？至少现在的我，考上好的中学、大学，既没有变成小偷，也没有变成文中所谓的“新品种”。现在与父母谈起这些事，却变成了美好的回忆。（Ps. 当然，偷东西是不好的，我偷零钱买辣条的事情暴露后，可是父母被打得很惨的。）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在未成年人的成长中，家长的引导作用十分重要&lt;/strong&gt;。孩子被一个人扔在家里，不管他看动漫还是看课本，都很难形成正确的价值观。希望各位家长明白这点，负起自己的责任，而不要把过错推卸给动漫。&lt;/p&gt;

&lt;h2 id=&quot;3-总结&quot;&gt;3. 总结&lt;/h2&gt;

&lt;p&gt;原文的结论，我是非常赞同的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;真正该带着孩子认识世界的，本来就是父母。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这点和我之前反驳原文的态度是一致的。&lt;/p&gt;

&lt;p&gt;可是为什么我要花一篇文章的力气来批驳原文，那是因为&lt;strong&gt;原文借“动漫”这一个热点，以一个不当的点切题，举一系列不正确的例证，来说明一个正常人都应该知道的常识&lt;/strong&gt;，给读者带来“动漫是不好的”这种印象。&lt;/p&gt;

&lt;p&gt;首先，文章开始着笔描写动漫对95后的影响，以图夸大动漫危害，视动漫为洪水猛兽，营造一种95后被动漫毁了的氛围。但文章最后得出的却是家长要对孩子进行指引。我们注意到，95后们都已经成年了，应当不是没有分辨力的儿童了，这和文章。也就是说，文章的主体本身就不明确，只是为了批判二次元而将一些数据、新闻和结论拼凑起来。&lt;/p&gt;

&lt;p&gt;其次，以偏概全，以优酷、B站前三的动漫代表“孩子”的观影偏好，本身就是有偏的，文章还片面地描述一些动画，以图让读者以为流行地动漫都是三观不正的，还以广电总局的招牌，给日本动画打上暴力血腥的标签；又举一些有统计偏差的例子，引导读者形成“看动漫会造成不良后果“的概念。&lt;/p&gt;

&lt;p&gt;最后，文章又直接抛出真正该带着孩子认识世界的，本来就是父母的结论，然而这一个结论根本不必基于“动漫”而得出。因为，父母的指引本来就是理所当然的，这是父母作为监护人的责任，这个结论，套在任何一个名词上都是合适的。而文章却偏偏举动漫，由此推断，其意图无非是想借“动漫”的热点通过批驳动漫以提高阅读量罢了。&lt;/p&gt;

&lt;p&gt;2018.01.11 午后 于广州&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/11/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/11/post01/</guid>
        
        <category>生活</category>
        
        <category>文艺</category>
        
        <category>ACG</category>
        
        
      </item>
    
      <item>
        <title>我们的时代</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;他们说，等今天过去了，就再没有未成年的90后了,他们说这将是00后的时代了，他们摆出自己的照片，开始怀缅意气风发的年纪。&lt;/p&gt;

&lt;h2 id=&quot;文&quot;&gt;文&lt;/h2&gt;

&lt;p&gt;那是我们的时代，可以肆无忌惮地畅谈未来，可以花一个下午的时间为秋风落叶感伤，可以不计后果地说“永远”。那是，我记得，我说过我永远爱着那个女孩，我说过我要永远保持热情，我说过我永远不要成为像父母一样的人……&lt;/p&gt;

&lt;p&gt;但少年口中的“永远”，永远是不可信的。他们连一生的长度都没有概念，他们怎么能知道“永远”有多远？&lt;/p&gt;

&lt;p&gt;那个本该永远被我爱着的女孩，早已不在我的心上；那份本应永远保持的热情，也早已屈服于生活的琐碎；至于我永远不想成为的父母啊，不知何时，雪花般的银色早已悄悄地爬上了他们的发梢。&lt;/p&gt;

&lt;p&gt;我已不再年少。那曾经的少年，开始为生计或欲望日夜疲于奔波，开始变得油腻、市侩、固执、自以为是。那曾经的少年，在他充满想象力的年纪里，大概是从未想到过自己将慢慢地成为自己所鄙夷的人。&lt;/p&gt;

&lt;p&gt;同年的人常说自己老了，但我从不这样说，因为我没有变老，我只是不再年少。倘若我说自己死了，那么比我更年长的人，未免也太可怜了些罢。我应当是永远不老的，即便不再年少，即便死去，也不要让世界看到我孱弱的模样。&lt;/p&gt;

&lt;p&gt;这是我们的时代，我们的时代已经过去了，但我们的时代才刚刚到来。&lt;/p&gt;

&lt;h2 id=&quot;后语&quot;&gt;后语&lt;/h2&gt;

&lt;p&gt;文章是归家时写在纸上，今日才post到blog上的。&lt;/p&gt;

&lt;p&gt;伏在家里的书桌前写字的感觉就像回到了年少的时候。&lt;/p&gt;

&lt;p&gt;以前我常在那张桌子上涂鸦、听电台、写小小的故事，后来我还经常涂鸦、听电台、写小小的故事，但碰到那张桌子的时间也渐渐少了。&lt;/p&gt;

&lt;p&gt;许久才回家一次，但因为母亲的打理，那张桌子一直没有积尘。&lt;/p&gt;

&lt;p&gt;2017.12.31 午后 于佛山&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/01/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/01/post01/</guid>
        
        <category>生活</category>
        
        <category>文艺</category>
        
        
      </item>
    
      <item>
        <title>爬虫入门笔记（三）</title>
        <description>&lt;h2 id=&quot;某魔法学院&quot;&gt;某魔法学院&lt;/h2&gt;

&lt;p&gt;今天校庆，和小伙伴出去吃了顿火锅有点高兴，所以写了一篇blog。（然而作业还没写完……）&lt;/p&gt;

&lt;p&gt;然而期中小长假结束了，有点不开心。&lt;/p&gt;

&lt;h2 id=&quot;如果坐上来自己动就好了&quot;&gt;如果坐上来自己动就好了&lt;/h2&gt;

&lt;p&gt;最近尝试爬知网上的一些数据(&lt;a href=&quot;https://dbpub.cnki.net/grid2008/dbpub/brief.aspx?id=scpd&quot;&gt;专利数据库&lt;/a&gt;)，他的界面是这个样子的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2017111201/pic01.png&quot; alt=&quot;图 - 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;嗯，那我们首先要进行查询才能获得数据，我们输入以下条件进行搜索。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2017111201/pic02.png&quot; alt=&quot;图 - 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2017111201/pic03.png&quot; alt=&quot;图 - 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;得出一堆结果，点开发现是一些有规律的表格。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/2017111201/pic04.png&quot; alt=&quot;图 - 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们能让浏览器自动搜索，不就可以让他一直获取网页的数据了吗？&lt;/p&gt;

&lt;h2 id=&quot;selenium简介与配置&quot;&gt;Selenium简介与配置&lt;/h2&gt;

&lt;p&gt;是的， 因此我们今天试着用selenium这个框架。说起这个框架，其实这还是我一个接触的爬虫框架，当时也正是因为觉得这个框架很酷才继续研究爬虫的。下一篇文章将会介绍我第一次学习爬虫时曲折旅途，其中就还会提到selenium。&lt;/p&gt;

&lt;p&gt;Selenium用于编写自动控制浏览器的脚本，除了在爬虫上有应用，在并发模拟上也有应用。&lt;/p&gt;

&lt;p&gt;配置selenium需要以下几个步骤：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;安装selenium模块
配置driver&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;安装selenium模块&quot;&gt;安装selenium模块&lt;/h4&gt;

&lt;p&gt;用对应python的pip(或conda)安装：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install selenium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置driverchrome&quot;&gt;配置driver(Chrome)&lt;/h4&gt;

&lt;p&gt;各种浏览器有各自的driver，这里推荐使用chrome的driver。&lt;/p&gt;

&lt;p&gt;首先要下载(&lt;a href=&quot;https://chromedriver.storage.googleapis.com/index.html&quot;&gt;地址&lt;/a&gt;)对应Chrome版本的chromedriver，版本映射表如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;v2.33&lt;/td&gt;
      &lt;td&gt;v2.32&lt;/td&gt;
      &lt;td&gt;v2.31&lt;/td&gt;
      &lt;td&gt;v2.30&lt;/td&gt;
      &lt;td&gt;v2.29&lt;/td&gt;
      &lt;td&gt;v2.28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;v60-62&lt;/td&gt;
      &lt;td&gt;v59-61&lt;/td&gt;
      &lt;td&gt;v58-60&lt;/td&gt;
      &lt;td&gt;v58-60&lt;/td&gt;
      &lt;td&gt;v56-58&lt;/td&gt;
      &lt;td&gt;v55-57&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;v2.27&lt;/td&gt;
      &lt;td&gt;v2.26&lt;/td&gt;
      &lt;td&gt;v2.25&lt;/td&gt;
      &lt;td&gt;v2.24&lt;/td&gt;
      &lt;td&gt;v2.23&lt;/td&gt;
      &lt;td&gt;v2.22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;v54-56&lt;/td&gt;
      &lt;td&gt;v53-55&lt;/td&gt;
      &lt;td&gt;v53-55&lt;/td&gt;
      &lt;td&gt;v52-54&lt;/td&gt;
      &lt;td&gt;v51-53&lt;/td&gt;
      &lt;td&gt;v49-52&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;v2.21&lt;/td&gt;
      &lt;td&gt;v2.20&lt;/td&gt;
      &lt;td&gt;v2.19&lt;/td&gt;
      &lt;td&gt;v2.18&lt;/td&gt;
      &lt;td&gt;v2.17&lt;/td&gt;
      &lt;td&gt;v2.13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;v46-50&lt;/td&gt;
      &lt;td&gt;v43-48&lt;/td&gt;
      &lt;td&gt;v43-47&lt;/td&gt;
      &lt;td&gt;v43-46&lt;/td&gt;
      &lt;td&gt;v42-43&lt;/td&gt;
      &lt;td&gt;v42-45&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;v2.15&lt;/td&gt;
      &lt;td&gt;v2.14&lt;/td&gt;
      &lt;td&gt;v2.13&lt;/td&gt;
      &lt;td&gt;v2.12&lt;/td&gt;
      &lt;td&gt;v2.11&lt;/td&gt;
      &lt;td&gt;v2.10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;v40-43&lt;/td&gt;
      &lt;td&gt;v39-42&lt;/td&gt;
      &lt;td&gt;v38-41&lt;/td&gt;
      &lt;td&gt;v36-40&lt;/td&gt;
      &lt;td&gt;v36-40&lt;/td&gt;
      &lt;td&gt;v33-36&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;v2.9&lt;/td&gt;
      &lt;td&gt;v2.8&lt;/td&gt;
      &lt;td&gt;v2.7&lt;/td&gt;
      &lt;td&gt;v2.6&lt;/td&gt;
      &lt;td&gt;v2.5&lt;/td&gt;
      &lt;td&gt;v2.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;v31-34&lt;/td&gt;
      &lt;td&gt;v30-33&lt;/td&gt;
      &lt;td&gt;v30-33&lt;/td&gt;
      &lt;td&gt;v29-32&lt;/td&gt;
      &lt;td&gt;v29-32&lt;/td&gt;
      &lt;td&gt;v29-32&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参考自&lt;a href=&quot;https://blog.csdn.net/huilan_same/article/details/51896672&quot;&gt;selenium之 chromedriver与chrome版本映射表（更新至v2.33）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里一定要注意安装与你的Chrome版本对应的driver，不然会报错（这是个大坑）。&lt;/p&gt;

&lt;p&gt;把chromedriver放在环境变量的任一路径下即可。&lt;/p&gt;

&lt;p&gt;或者将chromedriver放在chrome的目录下，并将chrome的目录添加进去环境变量也是可以的。&lt;/p&gt;

&lt;p&gt;打开Python，测试一下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# 若配置成功，将会弹出Chrome浏览器界面&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https//www.sysu.edu.cn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 浏览中大的网站&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# 关闭webdriver&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，selenium的环境就配置好了。&lt;/p&gt;

&lt;h2 id=&quot;数据获取思路&quot;&gt;数据获取思路&lt;/h2&gt;

&lt;p&gt;我们思考一下我们搜索的流程。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开&lt;a href=&quot;https//dbpub.cnki.net/grid2008/dbpub/brief.aspx?id=scpd&quot;&gt;专利数据库&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;输入条件，搜索。&lt;/li&gt;
  &lt;li&gt;点击专利链接进入专利页面。&lt;/li&gt;
  &lt;li&gt;获取专利表格数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来我们将会按以上流程依次获取数据。&lt;/p&gt;

&lt;h2 id=&quot;使用selenium操作浏览器&quot;&gt;使用Selenium操作浏览器&lt;/h2&gt;

&lt;p&gt;Selenium作为一个自动化的框架，用在爬虫技术上最好的优点就是十分弱智，一句话概括就是“写一个Script来控制浏览器”，操作基本上只有两个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建一个webdriver对象（其实就是浏览器）&lt;/li&gt;
  &lt;li&gt;通过webdriver的函数控制浏览器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在测试Chrome的时候我们就知道怎么让webdriver打开一个网页了，用webdriver.get(url)就行了。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;search_whe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'地址'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;search_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'东莞'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;search_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https//dbpub.cnki.net/grid2008/dbpub/brief.aspx?id=scpd'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 创建一个webdriver，接下来的操作都基于此&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# 用get的方法打开网站&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要对webdriver进行控制，每个操作只要执行两步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;获取网页元素（Xpath）&lt;/li&gt;
  &lt;li&gt;操作网页元素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如我们要在输入框输入，首先要获取要输入的文本框元素这一个对象，获取元素可以用webdriver.find_element_by_xpath(xpath)这个函数。&lt;/p&gt;

&lt;p&gt;这里提到Xpath，那到底什么是Xpath呢？&lt;/p&gt;

&lt;p&gt;这个就和我们上次提到BeautifulSoup很想，其实就是网页元素在网页的路径，我们通过Xpath可以准确定位一个元素在网页的位置（有点像我们OS的文件路径），当然其中还可以用一些匹配符号什么的，也能获取元素列表，至于Xpath的具体含义我们先不细说，以后有机会也可以写一篇文章（或者可以参考：&lt;a href=&quot;https//cuiqingcai.com/2621.html&quot;&gt;静觅 - Python爬虫利器三之Xpath语法与lxml库的用法&lt;/a&gt;），在这里介绍一个获取Xpath的快捷方法。&lt;/p&gt;

&lt;p&gt;在Chrome里，对要获取的元素右键-检查元素，弹出开发者工具，对元素的html标签右键，复制Xpath即可得到对应的Xpath，如图的文本框元素Xpath为&lt;code class=&quot;highlighter-rouge&quot;&gt;//*[@id=&quot;Text1&quot;]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;获取了Xpath我们就可以获取元素，然后对元素进行操作，比如这里在文本框中输入关键词“东莞”。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;Text1&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 获取元素&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                             &lt;span class=&quot;c&quot;&gt;# 清空文本框内容&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&quot;东莞&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                  &lt;span class=&quot;c&quot;&gt;# 在已有内容后添加文本&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以发现文本框内容变成了&lt;code class=&quot;highlighter-rouge&quot;&gt;东莞&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其他操作类似，具体方法可以参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https//cuiqingcai.com/2599.html&quot;&gt;静觅 - Python爬虫利器五之Selenium的用法&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 此处接上，driver已经打开知网数据库网页。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 获取元素&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# inbox：输入文本框 buton：搜索按钮 where：检索项 pages：每页条目 types：专利类别&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;Text1&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;Table6&quot;]/tbody/tr[1]/td[3]/table/tbody/tr/td/input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;Select1&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;Table8&quot;]/tbody/tr/td/select[3]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;专利类别1&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 专利发明&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;专利类别2&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 外观设计&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;专利类别3&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 实用新型&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                               &lt;span class=&quot;c&quot;&gt;# 清空文本框内容&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# 在已有内容后添加文本&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                               &lt;span class=&quot;c&quot;&gt;# 清除所有已选专利类别&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;# 选择需要的专利类别&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_by_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'50'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# 设置每页50条专利&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_by_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_whe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 设置按地址搜索&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                               &lt;span class=&quot;c&quot;&gt;# 点击搜索按钮&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;获取专利数据&quot;&gt;获取专利数据&lt;/h2&gt;

&lt;p&gt;接下来就只需要定位专利条目，获取链接地址，然后提取相应链接里的信息。&lt;/p&gt;

&lt;p&gt;定位链接的话，我们仍然可以使用Selenium了啦，然后可以使用get_attribute这个方法来获取元素的属性。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'//*[@id=&quot;contentBox&quot;]/table/tbody/tr[2]/td[2]/a'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有很多个链接的话，我们可以看到他的Xpath是有规律的，于是写一个循环就可以了。&lt;/p&gt;

&lt;p&gt;获取了链接，之后我们可以就用正则表达式来获取专利的具体信息了，另外这里用requests代替urblib和urllib2，但其实作用是差不多的。&lt;/p&gt;

&lt;h2 id=&quot;爬虫对象与多线程&quot;&gt;爬虫对象与多线程&lt;/h2&gt;

&lt;p&gt;在Spider_Lv3的代码里，将爬虫写成一个类，这样在我们调用时可以比较方便一些，每个小步骤也写成对应函数，因此在代码修改时可以更加简单。&lt;/p&gt;

&lt;p&gt;为了可以一边定位网页链接同时也一边获取网页数据，代码中使用了多线程，过程中了解到有人认为Python的多线程比较鸡肋，此次使用多线程到底有没有提高效率暂时也没有深究，多线程作为一个待学习的内容将来再研究。&lt;/p&gt;

&lt;p&gt;代码已发到&lt;a href=&quot;https://github.com/codeRimoe/Spider/tree/master/demo/Level_3&quot;&gt;Github - Spider&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;2017.11.12 晚 于广州&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/12/post01/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/12/post01/</guid>
        
        <category>爬虫</category>
        
        <category>技术</category>
        
        <category>Python</category>
        
        <category>数据获取</category>
        
        
      </item>
    
  </channel>
</rss>
